// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpdatePositions
#pragma kernel InsertParticles
#pragma kernel ResetGrid
#pragma kernel ComputeDensity
#pragma kernel ComputeForce
#pragma kernel FindNeighbours

#define M_PI 3.14159265359

RWStructuredBuffer<float3> mPos;
RWStructuredBuffer<float3> mVel;
RWStructuredBuffer<float3> mForce;

RWStructuredBuffer<float> mDensity;
RWStructuredBuffer<float> mPressure;

RWStructuredBuffer<float> mDebug;

RWStructuredBuffer<int> mGridLengths;
RWStructuredBuffer<int> mGridParticles;
RWStructuredBuffer<int> mNeighbours;
RWStructuredBuffer<int> mNeighbourCounts;

float _DeltaTime;
float _GridCellSize;
float _ParticleMass;
float _KernelRadius;
float _RestDensity;
float _GasConstant;

float3 _Gravity;
float3 _GridOrigin;
float3 _GridSize;
float3 _GridCells;

int _NumNeighbours;

float bspline(float input)
{
	input = abs(input);
	float w;
	if (input < 1)
		w = input*input*(input / 2 - 1) + 2 / 3.0;
	else if (input < 2)
		w = input*(input*(-input / 6 + 1) - 2) + 4 / 3.0;
	else return 0;
	if (w < 0)
		return 0;
	return w;

}


//laplacien of the viscosity kernel
double laplaceViscKernel(float3 vec, double h)
{
	double r = length(vec);
	double result = 0;

	//check for neighbourhood
	if ((0 <= r) && (r <= h))
	{
		result = 45 * (h - r) / (M_PI*pow(h, 6));
	}
	return result;
}

//gradient of the poly6 kernel
float3 poly6GradKernel(float3 vec, double h)
{
	double r = length(vec);
	float3 result = float3(0, 0, 0);

	//check for neighbourhood
	if ((0 <= r) && (r <= h))
	{
		result = vec;
		result *= 945.0 / (32.0*M_PI*pow(h, 9))*(h*h - length(vec)*length(vec))*(h*h - length(vec)*length(vec));
	}
	return result;
}

float3 spikyGrad(float3 vec, double h)
{
	float3 result = float3(0, 0, 0);
	double r = length(vec);

	//check for neighbourhood
	if ((0 <= r) && (r <= h))
	{
		result = vec;
		result *= -45.0 / (M_PI*pow(h, 6))*(h - r)*(h - r);
	}
	return result;
}


//poly6 kernel
double poly6Kernel(float3 vec, double h)
{
	double result = 0;
	double rsq = dot(vec, vec);
	double hsq = h*h;

	//check for neighbourhood
	if (0 <= rsq && rsq <= hsq)
	{
		result = 315.0 / (64.0*M_PI*pow(h, 9));
		result *= pow((hsq - rsq), 3);
	}
	return result;
}

int GetGridIndex(int3 idx)
{
	return idx.x + _GridCells.x * (idx.y + _GridCells.x * idx.z);
}

bool isInBounds(int3 gridIdx)
{

	if(gridIdx.x < 0 || gridIdx.y < 0 || gridIdx.z < 0 || gridIdx.x > _GridCells.x -1 || gridIdx.y > _GridCells.y -1 || gridIdx.z > _GridCells.z -1)
	{
		return false;
	}

	return true;
}
	
float3 BoundaryCollision(float3 _Pos, float3 _Vel)
{

	float3 newPos = _Pos + _Vel * _DeltaTime;
	float3 vel = _Vel;

	//simulation boundaries
	// Y-axis
	float diff = 0;
	diff = _GridOrigin.y - newPos.y;
	if (diff > 1e-6)
	{
		vel.y = 0;
		vel.x *= 0.8;
		vel.z *= 0.8;
	}
	diff = newPos.y - _GridSize.y;
	if (diff > 1e-6) 
	{
		vel.y = 0;
		vel.x *= 0.8;
		vel.z *= 0.8;
	}

	// X-axis
	diff = _GridOrigin.x - newPos.x;
	if (diff > 1e-6) 
	{
		vel.x = 0;
		vel.z *= 0.8;
		vel.y *= 0.8;
	}
	diff = newPos.x - _GridSize.x;
	if (diff > 1e-6) 
	{
		vel.x = 0;
		vel.z *= 0.8;
		vel.y *= 0.8;
	}

	// Z-axis
	diff = _GridOrigin.z - newPos.z;
	if (diff > 1e-6) 
	{
		vel.z = 0;
		vel.x *= 0.8;
		vel.y *= 0.8;
	}
	diff = newPos.z - _GridSize.z;
	if (diff > 1e-6) 
	{
		vel.z = 0;
		vel.x *= 0.8;
		vel.y *= 0.8;
	}

	return vel;
}

[numthreads(8,8,8)]
void ResetGrid (uint3 id : SV_DispatchThreadID)
{
	int idx = GetGridIndex(id);
	mGridLengths[idx] = 0;
}

[numthreads(512,1,1)]
void InsertParticles (uint3 id : SV_DispatchThreadID)
{
	int i = id.x;

	int3 gridIdx = (mPos[i] - _GridOrigin) / _GridCellSize;

	if(!isInBounds(gridIdx))
	{
		return;
	}

	int idx = GetGridIndex(gridIdx);

	uint origIndex = 0;
	InterlockedAdd(mGridLengths[idx], 1, origIndex);

	//only allow 4 particles per grid cell
	if (origIndex > 4)
	{
		mGridLengths[idx] = 4;
		return;
	}

	mGridParticles[idx * 4 + origIndex] = i;
}

[numthreads(512,1,1)]
void FindNeighbours (uint3 id : SV_DispatchThreadID)
{
	uint i = id.x;

	float3 pos = mPos[i];
	float3 gridIdx = (pos - _GridOrigin) / _GridCellSize;

	if(!isInBounds(gridIdx))
		return;	

	int count = 0;
	//we check the cell the particle is in and every neighbouring cell
	for(int x = -1; x < 2; x++)
	{
		for(int y = -1; y < 2; y++)
		{
			for(int z = -1; z < 2; z++)
			{
				int3 neighbour = gridIdx + int3(x,y,z);
				
				if(!isInBounds(neighbour))
					continue;				

				int idx = GetGridIndex(neighbour);
				int cellNeighbours = mGridLengths[idx];

				for(int j = 0; j < cellNeighbours; j++)
				{
	
					int index = mGridParticles[(idx * 4) + j];
					float3 posJ = mPos[index];

					float3 dist = posJ - pos;
					float dsq = dist.x * dist.x + dist.y * dist.y + dist.z * dist.z;

					if ( dsq < (_KernelRadius * _KernelRadius) && dsq >= 0 && index != i) 
					{ 
						mNeighbours[i + count] = index;
						count++;

						if(count == _NumNeighbours - 1)
						{
							mNeighbourCounts[i] = count;
							return;
						}
					}	
				}
			}
		}
	}

	mNeighbourCounts[i] = count;
}


[numthreads(512,1,1)]
void ComputeDensity(uint3 id : SV_DispatchThreadID)
{
	uint i = id.x;

	float3 pos = mPos[i];
	float3 gridIdx = (mPos[i] - _GridOrigin) / _GridCellSize;
	int idx = GetGridIndex(gridIdx);
	float density = 0;
	float sum = 0;

	for(int j = 0; j < mNeighbourCounts[i]; j++)
	{
		
		int index = mNeighbours[i + j];
		float3 posJ = mPos[index];

		float3 dist = pos - posJ;

		//poly6 weight by distance
		float weight = poly6Kernel(dist, _KernelRadius);
		sum += weight * _ParticleMass;
		density++;
	}

	mDensity[i] = sum;
	mDensity[i] += poly6Kernel(float3(0,0,0), _KernelRadius);

	mDebug[i] = sum; //mDensity[i];

	mPressure[i] = ((_GasConstant * _RestDensity)/7) *  (pow(mDensity[i] / _RestDensity, 7) - 1);
}

[numthreads(512,1,1)]
void ComputeForce(uint3 id : SV_DispatchThreadID)
{
	uint i = id.x;

	float3 pos = mPos[i];
	float3 gridIdx = (mPos[i] - _GridOrigin) / _GridCellSize;

	float3 force = float3(0,0,0);
	float3 visc = float3(0, 0, 0);

	for(int j = 0; j < mNeighbourCounts[i]; j++)
	{
		
		int index = mNeighbours[i + j];
		float3 posJ = mPos[index];

		float3 dist = pos - posJ;
		float3 weight = spikyGrad(dist, _KernelRadius);

		float weight2 = poly6Kernel(dist, _KernelRadius);

		float V = _ParticleMass/mDensity[i]/2;

		float3 pressureTerm = V * (mPressure[i]+mPressure[index]) * weight;
		
		force -= dist * pressureTerm/length(dist);

		float3 rel_vel = mVel[index] - mVel[i];

		visc += V * 6.5f * laplaceViscKernel(dist, _KernelRadius) * rel_vel;

		//force -= (mPressure[i] / (mDensity[i] * mDensity[i]) + mPressure[index] / (mDensity[index] * mDensity[index])) * weight;
		//mForce[i] -= (mPressure[i] + mPressure[index]) / (2.0 * mDensity[index]) * weight;

		//force += (mVel[index] - mVel[i])  * weight2;
		
		//visc += 3.5f * (mVel[index] - mVel[i]) / mDensity[index] * laplaceViscKernel(dist, _KernelRadius);
	}

	mForce[i] += force + visc; // + visc; // + visc;
}

[numthreads(512,1,1)]
void UpdatePositions (uint3 id : SV_DispatchThreadID)
{

	int i = id.x;

	/*
	float3 pos = mPos[i];
	float3 gridIdx = (mPos[i] - _GridOrigin) / _GridCellSize;

	int3 targetCell = gridIdx + normalize(mVel[id.x]);

	int idx = GetGridIndex(targetCell);

	int cellNeighbours = mGridLengths[idx];

	float3 avgVel = float3(0,0,0);
	for(int j = 0; j < cellNeighbours; j++)
	{
	
		int index = mGridParticles[(idx * 4) + j];
		
		avgVel += mVel[index];
	}

	avgVel *= 1/cellNeighbours;

	if(length(mVel[i]) > length(avgVel) && cellNeighbours > 2)
		mVel[i] = normalize(mVel[i]) * length(avgVel);*/


	mVel[id.x] += mForce[id.x] * _DeltaTime/mDensity[i] + _Gravity * _DeltaTime;

	//if(mDensity[id.x] > 420)
		//mVel[id.x] = float3(0,0,0);

	mVel[id.x] = BoundaryCollision(mPos[id.x], mVel[id.x]);

	if(length(mVel[id.x]) > 3)
		mVel[id.x] = normalize(mVel[id.x]) * 3;

	mPos[id.x] += mVel[id.x] * _DeltaTime;

	mForce[id.x] = float3(0,0,0);
}